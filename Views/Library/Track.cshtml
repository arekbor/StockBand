@model Track
@{

    ViewData["Title"] = @Model.Title;
    if (User.Identity.IsAuthenticated)
    {
        Layout = "_Layout";
    }
    else
    {
        Layout = "_SimpleLayout";
    }

    var urlTrack = $"{Context.Request.Scheme}://{Context.Request.Host}{Url.Action("stream","library",new {guid=Model.Guid})}";
}

<div class="container mt-4 ">
    <div class="row">
        <div class="col-12 text-center" >
            <h5>@Model.Title</h5>
        </div>

        <div class="col-12 text-center mt-2">
            <div class="btn-group" role="group">
                <button id="button_play_pause" type="button" class="btn btn-secondary mx-2"><i class="bi bi-play-fill"></i></button>
                <button id="button_stop" type="button" class="btn btn-secondary mx-2"><i class="bi bi-stop-fill"></i></button>
                <button id="button_mute_unmute" type="button" class="btn btn-secondary mx-2"><i class="bi bi-volume-mute-fill"></i></button>
                @if (User.Identity.IsAuthenticated)
                {
                    <button type="button" class="btn btn-secondary mx-2"><i class="bi bi-share-fill"></i></button>
                    <button type="button" class="btn btn-secondary mx-2"><i class="bi bi-link-45deg"></i></button>
                    <button type="button" class="btn btn-secondary mx-2">Edit</button>
                }
             </div>
        </div>

        <div id="duration_dynamic" class="col-2 col-lg-1 mt-4 mb-3 text-end">00:00</div>
        <div class="col-8 col-lg-10">
            <div id="duration_container" class="w3-progress-container mt-4 mb-3 ">
                <div id="duration_progress" class="w3-progressbar"></div>
            </div>
        </div>
        <div id="duration_length" class="col-2 col-lg-1 mt-4 mb-3  text-start"></div>

        <div class="col-12 mt-4">
            <div class="text-start p-1 text-muted" style="font-size:small; border-bottom: 1px solid red; border-color: gray;">
                <div>Author: @Model.User.Name</div>
                <div>Posted: @Model.DateTimeCreate.ToString("f")</div>
                @if (User.Identity.IsAuthenticated)
                {
                    <div>Guid: @Model.Guid</div>
                    if(@Model.TrackAccess == TrackAccess.Inner)
                    {
                        <div>Access: Inner</div>
                    }
                    else if(@Model.TrackAccess == TrackAccess.Private)
                    {
                        <div>Access: Private</div>
                    }
                    else if(@Model.TrackAccess == TrackAccess.Public)
                    {
                        <div>Access: Public</div>
                    }
                    if (!string.IsNullOrEmpty(@Model.Description))
                    {
                        <div>Description: @Model.Description</div>
                    }
                }
            </div>
        </div>
        @if (User.Identity.IsAuthenticated)
        {
            if (!string.IsNullOrEmpty(@Model.Lyrics))
            {
                <div class="col-12 mt-4">
                    <div class="p-1 text-white" style="font-size:medium; border-bottom: 1px solid red; border-color: gray;">
                        <p>Lyrics:</p>
                        <p>@Model.Lyrics</p>
                        <p>@Model.Lyrics</p>
                    </div> 
                </div>
            }
        }
        
    </div>
</div>
@section Scripts{

<script>
    //TODO nie dziala przewijanie
    const audio = new Audio("@urlTrack");

    const button_play_pause = document.getElementById("button_play_pause");
    button_play_pause.addEventListener("click",function(){
        if(audio.paused && audio.duration > 0 && !audio.ended){
            audio.play();
            const interval = setInterval(UploadCurrentTime, 1000);
            button_play_pause.innerHTML = '<i class="bi bi-pause-fill"></i>';
        }else{
            audio.pause();
            button_play_pause.innerHTML = '<i class="bi bi-play-fill"></i>';
            clearInterval(interval);
        }
    });
    const button_stop = document.getElementById("button_stop");
    button_stop.addEventListener("click",function(){
        if(audio.duration > 0 && !audio.ended){
            audio.pause();
            audio.currentTime=0;
            button_play_pause.innerHTML = '<i class="bi bi-play-fill"></i>';
            clearInterval(interval);
        }
    });
    const button_mute_unmute = document.getElementById("button_mute_unmute");
    button_mute_unmute.addEventListener("click",function(){
        if(audio.volume > 0){
            audio.volume = 0;
            button_mute_unmute.innerHTML = '<i class="bi bi-volume-down-fill"></i>';
        }else{
            audio.volume = 1;
            button_mute_unmute.innerHTML = '<i class="bi bi-volume-mute-fill"></i>';
        }
    });
    audio.addEventListener("ended",function(){
        audio.currentTime = 0;
        button_mute_unmute.innerHTML = '<i class="bi bi-volume-mute-fill"></i>';
        button_play_pause.innerHTML = '<i class="bi bi-play-fill"></i>';
        clearInterval(interval);
    });

    const duration_length = document.getElementById("duration_length");
    audio.addEventListener("loadedmetadata",function(){
        const result = new Date(audio.duration * 1000).toISOString().slice(14, 19);
        duration_length.innerHTML = result;
    });

    const duration_dynamic = document.getElementById("duration_dynamic");
    const duration_progress = document.getElementById("duration_progress");
    const duration_container = document.getElementById("duration_container");

    function UploadCurrentTime(){
        const result = new Date(audio.currentTime * 1000).toISOString().slice(14, 19);
        duration_dynamic.innerHTML = result;

        
        let percent = Math.round((audio.currentTime*100)/audio.duration);
        duration_progress.style.width = percent+"%";
    }

    duration_container.addEventListener("click",function(e){
        let percent_bar = e.offsetX / this.offsetWidth;
        audio.currentTime = percent_bar*audio.duration;
        duration_progress.style.width = Math.round(percent_bar*100)+"%";

        const result = new Date(audio.currentTime * 1000).toISOString().slice(14, 19);
        duration_dynamic.innerHTML = result;

    });
</script>
}