@{
    ViewData["Title"] = "Track";
    Layout = "_Layout";
}
@model Track

<div class="container mt-5 background-player" style="height:450px;">
    <div class="row mt-2">
        <div class="col-md-6 text-center"><h5>@Model.Title</h5></div>
        <div class="col-md-6 text-center">
            <div class="btn-group" role="group">
                <button id="button_play_pause" type="button" class="btn btn-secondary mx-2"><i class="bi bi-play-fill"></i></button>
                <button id="button_stop" type="button" class="btn btn-secondary mx-2"><i class="bi bi-stop-fill"></i></button>
                <button id="button_mute_unmute" type="button" class="btn btn-secondary mx-2"><i class="bi bi-volume-mute-fill"></i></button>
                <button type="button" class="btn btn-secondary mx-2"><i class="bi bi-share-fill"></i></button>
                <button type="button" class="btn btn-secondary mx-2"><i class="bi bi-link-45deg"></i></button>
                <button type="button" class="btn btn-secondary mx-2">Edit</button>
             </div>
        </div>
        @{
            string classTextarea = string.Empty;
            if (!string.IsNullOrEmpty(@Model.Lyrics))
                classTextarea = "col-md-4 text-center mt-3";
            else
               classTextarea = "col-12 text-center mt-3"; 
        }
        <div class="@classTextarea">
        <div class="text-start" style="font-size:small">Info:</div>
            <textarea id="info_textarea" readonly class="background-player" style="width: 100%;padding: 12px 20px; font-size: 16px; resize: none; color:white;">
                <p>Author: @Model.User.Name</p>
                <p>Posted: @Model.DateTimeCreate.ToString("f")</p>
                <p>Guid: @Model.Guid</p>
                    @if(@Model.TrackAccess == TrackAccess.Inner){
                    <p>Access: Inner</p>}
                    else if(@Model.TrackAccess == TrackAccess.Private){
                    <p>Access: Private</p>}
                    else if(@Model.TrackAccess == TrackAccess.Public){
                    <p>Access: Public</p>}
                <p>Plays: @Model.PlaysCount</p>
                @if (!string.IsNullOrEmpty(@Model.Description)){
                    <p>Description: @Model.Description</p>}
            </textarea>
        </div>
        @if (!string.IsNullOrEmpty(@Model.Lyrics))
        {
            <div class="col-md-8 text-center mt-3">
            <div class="text-start" style="font-size:small">Lyrics:</div>
                <textarea id="lyrics_textarea" readonly class="background-player" style="width: 100%;padding: 12px 20px; font-size: 25px; resize: none; color:white;">
                    <p>@Model.Lyrics</p>
                </textarea>
            </div>
        }
        <div id="duration_dynamic" class="col-2 mt-5 text-end">00:00</div>
        <div class="col-8">
            <div class="w3-progress-container mt-5">
                <div class="w3-progressbar" style="width:10%"></div>
            </div>
        </div>
        <div id="duration_length" class="col-2 mt-5 text-start"></div>
    </div>
</div>

@section Scripts{
<script>
    
    const audio = new Audio("@Context.Request.Scheme://@Context.Request.Host/"+"audio/@Model.Guid"+".@Model.Extension");


    CKEDITOR.replace( 'info_textarea', {
        customConfig: 'custom/info.js'
    });
    CKEDITOR.addCss(".cke_editable{background-color: #D3D3D3}");

    if(document.getElementById("lyrics_textarea")){
        CKEDITOR.replace( 'lyrics_textarea', {
            customConfig: 'custom/info.js'
        });
        CKEDITOR.addCss(".cke_editable{background-color: #D3D3D3}");
    }

    const button_play_pause = document.getElementById("button_play_pause");
    button_play_pause.addEventListener("click",function(){
        if(audio.paused && audio.duration > 0 && !audio.ended){
            audio.play();
            const interval = setInterval(UploadCurrentTime, 1000);
            button_play_pause.innerHTML = '<i class="bi bi-pause-fill"></i>';
        }else{
            audio.pause();
            button_play_pause.innerHTML = '<i class="bi bi-play-fill"></i>';
            clearInterval(interval);
        }
    });
    const button_stop = document.getElementById("button_stop");
    button_stop.addEventListener("click",function(){
        if(audio.duration > 0 && !audio.ended){
            audio.pause();
            audio.currentTime=0;
            button_play_pause.innerHTML = '<i class="bi bi-play-fill"></i>';
            clearInterval(interval);
        }
    });
    const button_mute_unmute = document.getElementById("button_mute_unmute");
    button_mute_unmute.addEventListener("click",function(){
        if(audio.volume > 0){
            audio.volume = 0;
            button_mute_unmute.innerHTML = '<i class="bi bi-volume-down-fill"></i>';
        }else{
            audio.volume = 1;
            button_mute_unmute.innerHTML = '<i class="bi bi-volume-mute-fill"></i>';
        }
    });
    audio.addEventListener("ended",function(){
        audio.currentTime = 0;
        button_mute_unmute.innerHTML = '<i class="bi bi-volume-mute-fill"></i>';
        button_play_pause.innerHTML = '<i class="bi bi-play-fill"></i>';
        clearInterval(interval);
    });

    const duration_length = document.getElementById("duration_length");
    audio.addEventListener("loadedmetadata",function(){
        const result = new Date(audio.duration * 1000).toISOString().slice(14, 19);
        duration_length.innerHTML = result;
    });

    const duration_dynamic = document.getElementById("duration_dynamic");
    function UploadCurrentTime(){
        const result = new Date(audio.currentTime * 1000).toISOString().slice(14, 19);
        duration_dynamic.innerHTML = result;
    }

</script>
}